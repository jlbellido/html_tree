<?php

/**
* @file
*/

/**
* Implementation of hook_init().
*/
function html_tree_init() {

    if(user_access('Html Tree Export')){
        $path = drupal_get_path('module', 'html_tree');
        drupal_add_js($path .'/html_tree.js');
        drupal_add_css($path .'/html_tree.css');
    }

  //  html_tree_parse_rules();
}

/**
* Implementation of hook_menu().
*/
function html_tree_menu() {

    $items['html_tree/export'] = array(
        'page callback' => 'html_tree_export',
        'access callback' => 'user_access',
        'access arguments' => array('Html Tree Export'),
        'type' => MENU_CALLBACK,
        );

    $items['html_tree/load'] = array(
        'page callback' => 'html_tree_load',
        'access callback' => 'user_access',
        'access arguments' => array('Html Tree Export'),
        'type' => MENU_CALLBACK,
    );
    $items['html_tree/download/%'] = array(
        'page callback' => 'html_tree_download',
        'page arguments' => array(2),
        'access callback' => 'user_access',
        'access arguments' => array('Html Tree Export'),
        'type' => MENU_CALLBACK,
    );

    $items['admin/html_tree'] = array(
        'title' => 'Html Tree Export',
        'description' => 'Allow to Export the html tree (DOM) in different formats.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('html_tree_form_admin'),
        'access callback' => 'user_access',
        'access arguments' => array('Html Tree Export Admin'),
        );

    return $items;
}

/**
* Implementation of hook_theme().
*/
function html_tree_theme() {
    $items = array(
        'html_tree' => array(
            'arguments' => array('content' => NULL),
            'template' => 'html-tree',
            ),
        );
    return $items;
}


/**
* Implementation of hook_theme().
*/
function html_tree_perm() {
    return array(
        'Html Tree Export',
        'Html Tree Export Admin',
        );
}

function html_tree_export(){
    $status = true;
    if($_POST['data']){
        $data = json_decode($_POST['data'],true);
        $content = get_html_struct($data);
        $filename = variable_get('html_tree_file_name', 'html_tree_export');
        $filename = $filename.'_'.time().'.html';
        $temp_path =file_directory_path() . '/';
        $file = $temp_path . $filename;
        $file_uri = file_create_url($file);
        $create_file = file_put_contents($file, $content, FILE_APPEND);


        if ( $create_file === FALSE ) {
            $output = 'There was a problem creating the html file.';
            $status = FALSE;
        }else{
            $output = 'The file was successfuly created';
        }
    }
    drupal_json(array('status' => $status, 'message' => $output, 'name' => $filename));


}
function html_tree_load(){
    $output = theme('html_tree');
    return drupal_json(array('status' => TRUE, 'output' => $output));
}

function get_html_struct($data, $rules = null){
    $jump = _html_tree_jump_item($data);
    $jump_block = _html_tree_jump_block($data);
    if(!$rules){
        $rules = html_tree_rules_loader();
    }

    $str = '';
    $str .= (!$jump) ? "<ul><li>\n" : '';



    if(count($data) > 3){

        $str .= (!$jump) ? _get_html_struct_add_information($data, $rules) : '';

        $restore_rules = $rules;
        $rules = _html_tree_status_trigger($data, $rules);
        foreach ($data as $key => $value) {
            if ( stripos($key,'child_') !== FALSE  && !$jump_block ) {
                $str .= get_html_struct($value,$rules);
            }
        }
    }else{ //base case
        $str .= (!$jump) ? _get_html_struct_add_information($data, $rules) : '';
    }

    $str .= (!$jump) ? "</li></ul>\n" : '';

    return $str;

}

function _html_tree_status_trigger($data, $rules){
    $i = 0;
    foreach($rules as $key => $rule){
        if($key !== 'status'){
            if($rule['trigger'][1] == $data['id']){
                $rules['status'][$i] = true;
            }
        }
        $i++;
    }
    return $rules;
}

function _get_html_struct_add_information($data, $rules){
    for($i = 0; $i<count($rules['status']); $i++){

        if($rules['status'][$i]){
            if($rules[$i]['when'][0] == 'id'){
                if(_strstart($data['id'], $rules[$i]['when'][1] )){
                    if($rules[$i]['replaceby'][0] = 'id'){
                        $data['id'] = $rules[$i]['replaceby'][1];
                    }elseif($rules[$i]['replaceby'][0] = 'class'){
                        $data['class'] = $rules[$i]['replaceby'][1];
                    }
                }
            }elseif($rules[$i]['when'][0] == 'id'){
                //TODO implements class support
            }
        }
    }

    $str = '';

    $str .= $data['tag'];

    if($data['id'] != ''){
        $str .= ' id: '.$data['id'];
    }

    if($data['class'] != ''){
        $str .= ' class: '.$data['class'];
    }

    if($str != '') $str .= "\n";

    return $str;
}
function _html_tree_jump_block($data){
    $jump = false;
    $blocks = variable_get('html_tree_exclude_block',array());

    $i = 0;
    while($i < count($blocks) && !$jump){
        if($data['id'] == $blocks[$i]){
            $jump = true;
        }
        $i++;
    }

    return $jump;
}

function _html_tree_jump_item($data){
    $jump = false;

    $empty_items = variable_get('html_tree_empty_items', array());
    $i = 0;
    while($i < count($empty_items) && !$jump){
        if($data[$empty_items[$i]] == ''){
            $jump = true;
        }
        $i++;
    }
    return $jump;
}




function html_tree_form_admin(){

    $form = array();

    $form['file_name'] = array(
        '#type' => 'textfield',
        '#title' => t('File name'),
        '#required' => TRUE,
        '#default_value' => variable_get('html_tree_file_name', 'html_tree_export'),
    );

    $form['exclude_items'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Exclude items'),
        '#description' => t('When a item has the selected values empty, the item will not added from the tree'),
        '#options' => variable_get('html_tree_empty_items_options', array()),
        '#default_value' => variable_get('html_tree_empty_items', array()),
        );

    $form['exclude_block'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Exclude Block'),
        '#description' => t('The selected nodes and their children will be excluded from the tree'),
        '#options' => variable_get('html_tree_exclude_block_options', array()),
        '#default_value' => variable_get('html_tree_exclude_block', array()),
    );

    $form['rules'] = array(
        '#type' => 'textarea',
        '#title' => t('Rules'),
        '#required' => false,
        '#default_value' => variable_get('html_tree_rules', ''),
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Save',
        );

    return $form;
}

function html_tree_form_admin_submit($form, &$form_state){

    $new_name = $form_state['values']['file_name'];
    variable_set('html_tree_file_name', trim($new_name));

    $exclude_items = array();
    foreach ($form_state['values']['exclude_items'] as $key => $value) {
        if ($value !== 0) {
            $exclude_items[] = $key;
        }
    }
    variable_set('html_tree_empty_items', $exclude_items);

    $exclude_block= array();
    foreach ($form_state['values']['exclude_block'] as $key => $value) {
        if ($value !== 0) {
            $exclude_block[] = $key;
        }
    }
    variable_set('html_tree_exclude_block', $exclude_block);


    $rules = $form_state['values']['rules'];
    if($rules){
        variable_set('html_tree_rules',$rules);
    }

}
function html_tree_form_admin_validate($form, &$form_state){

    $new_name = $form_state['values']['file_name'];
    if(preg_match('/[^a-z_\-0-9]/i', trim($new_name))){
        form_set_error('file_name', 'Only alphanumeric character are allowed.');

    }
}


function html_tree_download($filename){
    $path = file_directory_path() . '/';
    $file = $path .$filename;
    if(is_file($file)){
        header('Pragma: public');
        header('Expires: 0');
        header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
        header('Last-Modified: '.gmdate ('D, d M Y H:i:s', filemtime ($file)).' GMT');
        header('Cache-Control: private',false);
        header('Content-Type: application/force-download');
        header('Content-Disposition: attachment; filename="'.basename($file).'"');
        header('Content-Transfer-Encoding: binary');
        header('Content-Length: '.filesize($file));
        header('Connection: close');
        readfile($file);
        exit();
    }
}

function html_tree_parse_rules($rule = null){
    $rule = explode(';', $rule);
    $struct = array();
    foreach($rule as $value){
        $value = str_replace('}', '', $value);
        $tmp = explode('{', $value);
        $tmp[1] = explode(':', $tmp[1]);

        $struct[$tmp[0]] = array($tmp[1][0],$tmp[1][1]);
    }
    return $struct;
}

function html_tree_rules_loader(){

    $tmp = variable_get('html_tree_rules', '');
    $tmp = explode("\r\n", $tmp);
    $rules = array();
    foreach($tmp as $rule){
        $rules[] = html_tree_parse_rules($rule);
    }

    $rules['status'] = _html_tree_rules_status($rules);
    return $rules;
}

function _html_tree_rules_status($rules){
    $status = array();
    for( $i=0; $i<count($rules); $i++){
        $status[$i] = false;
    }

    return $status;
}

function _strstart($haystack, $needle)
{
    return $needle === "" || strpos($haystack, $needle) === 0;
}